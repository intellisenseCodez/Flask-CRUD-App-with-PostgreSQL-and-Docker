name: CI/CD for FlaskAPI Dockerized App


# define a specific event
on:
    push:
        branches: [ master ]
        # paths:
        #     - "./Dockerfile"
        paths-ignore:
            - "README.md"
            - "**/docs"
    pull_request:
        branches: [ master ]

    workflow_dispatch:


# secrets
# DOCKER_HUB_USERNAME
# DOCKER_HUB_PASSWORD
# AWS_ACCESS_KEY_ID
# AWS_SECRET_ACCESS_KEY
# AWS_REGION
# ECR_REPOSITORY_NAME
# AWS_LOGIN_URI

# define jobs
jobs:
    build-and-test:
        name: Build and Test
        runs-on: ubuntu-latest 

        steps:
            # checkout of code
            - name: Checkout
              uses: actions/checkout@v4

            # setup python
            - name: Set up python
              uses: actions/setup-python@v5
              with:
                python-version: '3.13'
                cache: 'pip' # caching pip dependencies
            
            # install requirements
            - name: install dependencies
              run: |
                pip install -r requirements.txt
              shell: bash

            # Test code
            - name: test code
              run: |
                echo "Running unit testing"
                pytest
              shell: bash

    build-and-publish-image-dockerhub:
        name: Build and publish image to Dockerhub
        needs: build-and-test
        runs-on: ubuntu-latest

        steps:
            # checkout of code
            - name: Checkout
              uses: actions/checkout@v4

            # Set up Docker Buildx
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            # Login to Docker Hub
            - name: Login to DockerHUB
              uses: docker/login-action@v2
              with:
                username: ${{ secrets.DOCKER_HUB_USERNAME }}
                password: ${{ secrets.DOCKER_HUB_PASSWORD }}

            # Build and Push Image
            - name: Build and push docker image
              uses: docker/build-push-action@v4
              with:
                context: .
                file: ./Dockerfile
                push: true
                tags: ${{ secrets.DOCKER_HUB_USERNAME }}/flask-restapi-crud-app:latest

            # image digest
            - name: Image digest
              run: echo ${{ steps.build-and-publish-image-dockerhub.outputs.digest }}
              shell: bash

    build-and-publish-image-ecr:
        name: Build and publish image to AWS ECR
        needs: build-and-test
        runs-on: ubuntu-latest

        steps:
            # checkout of code
            - name: Checkout
              uses: actions/checkout@v4

            # install utilities
            - name: Install utilities
              run: |
                sudo apt-get update -y
                sudo apt-get upgrade -y
                sudo apt-get install -y jq unzip

            # Configure AWS credentials
            - name: configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION }}

            # Login to Amazon ECR
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            # Build, and push image to ECR
            - name: Build and Push Image to ECR
              id: build-image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
                IMAGE_TAG: lastest
              run: |
                docker build -t  $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG .
                docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
                echo "Pushed Image to AWS ECR"

    continuous-deployment:
        name: Deploy container image to AWS ECS
        needs: build-and-test
        runs-on: ubuntu-latest

        steps:
            # checkout of code
            - name: Checkout
              uses: actions/checkout@v4
             
            # Configure AWS credentials
            - name: configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION }}

            # Login to Amazon ECR
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            # pull latest image from ECR
            - name: Pull latest image from ECR
              run: |
                docker pull ${{ secrets.AWS_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

            # Run docker image
            - name: Run Docker Image 
              run: |
                docker run -d -p 5000:5000 --ipc="host" --name=flaskapp \
                 -e "AWS_ACCESS_KEY_ID"=${{ secrets.AWS_ACCESS_KEY_ID }}
                 -e "AWS_SECRET_ACCESS_KEY"=${{ secrets.AWS_SECRET_ACCESS_KEY }}
                 -e "AWS_REGION"=${{ secrets.AWS_REGION }}
                 ${{ secrets.AWS_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

            - name: Clean previous image and containers
              run: |
               docker system prune -f
